/**
 * 정렬
 *
 * 요소들을 일정한 순서대로 열거하는 알고리즘
 * 정렬 기준은 사용자가 정할 수 있다.
 * 크게 비교식과 분산식 정렬로 나눌 수 있다.
 * 대부분의 언어가 빌트인으로 제공해준다.
 * 삽입, 선택, 버블, 머지, 힙, 퀵 정렬 등 다양한 정렬 방식이 존재한다.
 */

/**
 * 비교식 정렬
 *
 * 서로 인접한 두 요소를 검사하여 정렬하는 알고리즘
 * O(n^2) 시간복잡도를 가진다.
 *
 * 선택 정렬
 *
 * 선택한 요소와 가장 우선순위가 높은 요소를 교환하는 정렬 알고리즘
 * O(n^2) 시간복잡도를 가진다.
 *
 * 첫번째 요소와 가장 우선순위가 높은 요소와 교환.
 * 두번째 요소와 나머지 요소 중 우선순위가 높은 요소와 교환
 * (반복)
 * 나머지 2가지 요소를 비교하고 교환 or 그대로.
 *
 * 삽입 정렬
 *
 * 선택한 요소를 삽입 할 수 있는 위치를 찾아 삽입하는 방식의 정렬 알고리즘
 * O(n^2) 시간복잡도를 가진다.
 *
 * 순서대로 요소를 선택하고 우선순위에 따라 계속해서 요소를 밀어내거나 그 자리에 삽입되는 과정 반복
 */

/**
 * 분산식 정렬
 *
 * 분할 정복
 *
 * 문제를 작은 2개의 문제로 분리하고 더이상 분리가 불가능 할 때 처리한 후 합치는 전략.
 * 다양한 알고리즘에 응용된다.
 *
 * 합병 정렬
 *
 * 분할 정복 알고리즘을 이용한 최선과 최악이 같은 안정적인 정렬 알고리즘
 * O(n logn)시간 복잡도를 가진다
 *
 * 퀵 정렬
 *
 * 분할 정복 알고리즘을 이용한 매우 빠르지만 최악의 경우가 존재하는 불안정 정렬
 * O(n logn)시간 복잡도를 가진다, 최악의 경우 O(n^2)?
 */

// 문제 풀이
// 나의 풀이
function solution(numbers) {
  const strings = numbers.map((number) => String(numbers));
  const answer = strings.sort((a, b) => b + a - (a + b)).join("");

  if (answer[0] === "0") return "0";

  return answer;
}
